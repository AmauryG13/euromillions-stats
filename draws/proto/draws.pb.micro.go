// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/draws.proto

package proto

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Draws service

func NewDrawsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Draws service

type DrawsService interface {
	Get(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*GetResponse, error)
}

type drawsService struct {
	c    client.Client
	name string
}

func NewDrawsService(name string, c client.Client) DrawsService {
	return &drawsService{
		c:    c,
		name: name,
	}
}

func (c *drawsService) Get(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*GetResponse, error) {
	req := c.c.NewRequest(c.name, "Draws.Get", in)
	out := new(GetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Draws service

type DrawsHandler interface {
	Get(context.Context, *GetRequest, *GetResponse) error
}

func RegisterDrawsHandler(s server.Server, hdlr DrawsHandler, opts ...server.HandlerOption) error {
	type draws interface {
		Get(ctx context.Context, in *GetRequest, out *GetResponse) error
	}
	type Draws struct {
		draws
	}
	h := &drawsHandler{hdlr}
	return s.Handle(s.NewHandler(&Draws{h}, opts...))
}

type drawsHandler struct {
	DrawsHandler
}

func (h *drawsHandler) Get(ctx context.Context, in *GetRequest, out *GetResponse) error {
	return h.DrawsHandler.Get(ctx, in, out)
}
