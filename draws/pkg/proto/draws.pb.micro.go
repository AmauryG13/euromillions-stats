// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/draws.proto

package proto

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for DrawsService service

func NewDrawsServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for DrawsService service

type DrawsService interface {
	GetDraw(ctx context.Context, in *GetDrawRequest, opts ...client.CallOption) (*GetDrawResponse, error)
	AddDraw(ctx context.Context, in *AddDrawRequest, opts ...client.CallOption) (*AddDrawResponse, error)
	ListDraw(ctx context.Context, in *ListDrawRequest, opts ...client.CallOption) (*ListDrawResponse, error)
}

type drawsService struct {
	c    client.Client
	name string
}

func NewDrawsService(name string, c client.Client) DrawsService {
	return &drawsService{
		c:    c,
		name: name,
	}
}

func (c *drawsService) GetDraw(ctx context.Context, in *GetDrawRequest, opts ...client.CallOption) (*GetDrawResponse, error) {
	req := c.c.NewRequest(c.name, "DrawsService.GetDraw", in)
	out := new(GetDrawResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drawsService) AddDraw(ctx context.Context, in *AddDrawRequest, opts ...client.CallOption) (*AddDrawResponse, error) {
	req := c.c.NewRequest(c.name, "DrawsService.AddDraw", in)
	out := new(AddDrawResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drawsService) ListDraw(ctx context.Context, in *ListDrawRequest, opts ...client.CallOption) (*ListDrawResponse, error) {
	req := c.c.NewRequest(c.name, "DrawsService.ListDraw", in)
	out := new(ListDrawResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DrawsService service

type DrawsServiceHandler interface {
	GetDraw(context.Context, *GetDrawRequest, *GetDrawResponse) error
	AddDraw(context.Context, *AddDrawRequest, *AddDrawResponse) error
	ListDraw(context.Context, *ListDrawRequest, *ListDrawResponse) error
}

func RegisterDrawsServiceHandler(s server.Server, hdlr DrawsServiceHandler, opts ...server.HandlerOption) error {
	type drawsService interface {
		GetDraw(ctx context.Context, in *GetDrawRequest, out *GetDrawResponse) error
		AddDraw(ctx context.Context, in *AddDrawRequest, out *AddDrawResponse) error
		ListDraw(ctx context.Context, in *ListDrawRequest, out *ListDrawResponse) error
	}
	type DrawsService struct {
		drawsService
	}
	h := &drawsServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&DrawsService{h}, opts...))
}

type drawsServiceHandler struct {
	DrawsServiceHandler
}

func (h *drawsServiceHandler) GetDraw(ctx context.Context, in *GetDrawRequest, out *GetDrawResponse) error {
	return h.DrawsServiceHandler.GetDraw(ctx, in, out)
}

func (h *drawsServiceHandler) AddDraw(ctx context.Context, in *AddDrawRequest, out *AddDrawResponse) error {
	return h.DrawsServiceHandler.AddDraw(ctx, in, out)
}

func (h *drawsServiceHandler) ListDraw(ctx context.Context, in *ListDrawRequest, out *ListDrawResponse) error {
	return h.DrawsServiceHandler.ListDraw(ctx, in, out)
}
